From 71e8d9ddf8c2ec95f1e104637c708acbaba2b239 Mon Sep 17 00:00:00 2001
From: remittor <remittor@gmail.com>
Date: Fri, 10 Jun 2016 13:44:50 +0300
Subject: [PATCH] Settings: Add support for fake signatures, enabled by
 developer setting

src: https://gerrit.omnirom.org/#/c/14899/
---
 res/values-ru/cm_strings.xml                      |  3 ++
 res/values/cm_strings.xml                         |  5 +++
 res/xml/development_prefs.xml                     |  5 +++
 src/com/android/settings/DevelopmentSettings.java | 50 +++++++++++++++++++++++
 4 files changed, 63 insertions(+)

diff --git a/res/values-ru/cm_strings.xml b/res/values-ru/cm_strings.xml
index 9a55c8c..45a85a7 100644
--- a/res/values-ru/cm_strings.xml
+++ b/res/values-ru/cm_strings.xml
@@ -1026,4 +1026,7 @@
   <string name="lock_to_cyanogen_create_account_msg">Устройство использует пароль аккаунта ОС Cyanogen для защиты устройства от сброса настроек. Потребуется создать новый аккаунт ОС Cyanogen.</string>
   <string name="lock_to_cyanogen_disable_msg">Отключение этой функции позволит другим людям выполнить удаление всех данных на устройстве в случае его кражи. Ваши личные данные могут стать недостаточно защищёнными. Вы действительно хотите отключить эту функцию?</string>
   <string name="lock_to_cyanogen_master_clear_warning">Защита устройства включена. Необходимо отключить её, чтобы выполнить сброс настроек на устройстве.</string>
+  <string name="allow_signature_fake">Разрешить подмену подписи APK</string>
+  <string name="allow_signature_fake_summary">Разрешить приложениям обманывать системы безопасности, выдавая себя за другое приложение</string>
+  <string name="allow_signature_fake_warning">Разрешение приложениям обманывать системы безопасности может привести к серьезным проблемам безопасности и конфиденциальности! Убедитесь, что только доверенные приложения используют соответствующее разрешение.</string>
 </resources>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 79c8a8c..0ace372 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -1466,4 +1466,9 @@ two in order to insert additional control points. \'Remove\' deletes the selecte
     <string name="lock_to_cyanogen_disable_msg">Disabling this feature will allow unauthorized users to reset your phone to factory defaults if it is stolen. Your personal data may not be protected. Do you want to disable this feature?</string>
     <string name="lock_to_cyanogen_master_clear_warning">Device Protection is enabled. Please disable to continue resetting your device.</string>
 
+    <!-- Allow fake signature checkbox in developer settings -->
+    <string name="allow_signature_fake">Allow signature spoofing</string>
+    <string name="allow_signature_fake_summary">Allow apps to bypass security systems by pretending to be a different app</string>
+    <string name="allow_signature_fake_warning">Allowing apps to bypass security systems can lead to serious security and privacy problems! Check that only benign apps use the corresponding permission when this is active.</string>
+
 </resources>
diff --git a/res/xml/development_prefs.xml b/res/xml/development_prefs.xml
index 45e8906..c12e0fc 100644
--- a/res/xml/development_prefs.xml
+++ b/res/xml/development_prefs.xml
@@ -319,6 +319,11 @@
             android:entries="@array/select_runtime_titles"
             android:entryValues="@array/select_runtime_values" />
 
+        <CheckBoxPreference
+            android:key="allow_signature_fake"
+            android:title="@string/allow_signature_fake"
+            android:summary="@string/allow_signature_fake_summary"/>
+
         <ListPreference
             android:key="app_process_limit"
             android:title="@string/app_process_limit_title"
diff --git a/src/com/android/settings/DevelopmentSettings.java b/src/com/android/settings/DevelopmentSettings.java
index 91fa4e8..e0ffe29 100644
--- a/src/com/android/settings/DevelopmentSettings.java
+++ b/src/com/android/settings/DevelopmentSettings.java
@@ -155,6 +155,9 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
 
     private static final String IMMEDIATELY_DESTROY_ACTIVITIES_KEY
             = "immediately_destroy_activities";
+
+    private static final String ALLOW_SIGNATURE_FAKE_KEY = "allow_signature_fake";
+
     private static final String APP_PROCESS_LIMIT_KEY = "app_process_limit";
 
     private static final String SHOW_ALL_ANRS_KEY = "show_all_anrs";
@@ -226,6 +229,7 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
     private ListPreference mOpenGLTraces;
 
     private CheckBoxPreference mImmediatelyDestroyActivities;
+    private CheckBoxPreference mAllowSignatureFake;
     private ListPreference mAppProcessLimit;
 
     private CheckBoxPreference mShowAllANRs;
@@ -258,6 +262,8 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
     private Dialog mRootDialog;
     private Dialog mUpdateRecoveryDialog;
 
+    private Dialog mAllowSignatureFakeDialog;
+
     public DevelopmentSettings() {
         super(RESTRICTIONS_PIN_SET);
     }
@@ -365,6 +371,11 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
                 IMMEDIATELY_DESTROY_ACTIVITIES_KEY);
         mAllPrefs.add(mImmediatelyDestroyActivities);
         mResetCbPrefs.add(mImmediatelyDestroyActivities);
+
+        mAllowSignatureFake = (CheckBoxPreference) findPreference(ALLOW_SIGNATURE_FAKE_KEY);
+        mAllPrefs.add(mAllowSignatureFake);
+        mResetCbPrefs.add(mAllowSignatureFake);
+
         mAppProcessLimit = addListPreference(APP_PROCESS_LIMIT_KEY);
 
         mShowAllANRs = (CheckBoxPreference) findPreference(
@@ -595,6 +606,7 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
         updateOverlayDisplayDevicesOptions();
         updateOpenGLTracesOptions();
         updateImmediatelyDestroyActivitiesOptions();
+        updateAllowSignatureFakeOption();
         updateAppProcessLimitOptions();
         updateShowAllANRsOptions();
         updateVerifyAppsOverUsbOptions();
@@ -1218,6 +1230,11 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
             getActivity().getContentResolver(), Settings.Global.ALWAYS_FINISH_ACTIVITIES, 0) != 0);
     }
 
+    private void updateAllowSignatureFakeOption() {
+        updateCheckBox(mAllowSignatureFake, Settings.Secure.getInt(
+            getActivity().getContentResolver(), Settings.Secure.ALLOW_SIGNATURE_FAKE, 0) != 0);
+    }
+
     private void updateAnimationScaleValue(int which, AnimationScalePreference pref) {
         try {
             float scale = mWindowManager.getAnimationScale(which);
@@ -1514,6 +1531,24 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
             writeCpuUsageOptions();
         } else if (preference == mImmediatelyDestroyActivities) {
             writeImmediatelyDestroyActivitiesOptions();
+        } else if (preference == mAllowSignatureFake) {
+            if (mAllowSignatureFake.isChecked()) {
+                if (mAllowSignatureFakeDialog != null) {
+                    dismissDialogs();
+                }
+                mAllowSignatureFakeDialog = new AlertDialog.Builder(getActivity()).setMessage(
+                        getResources().getString(R.string.allow_signature_fake_warning))
+                        .setTitle(R.string.allow_signature_fake)
+                        .setIconAttribute(android.R.attr.alertDialogIcon)
+                        .setPositiveButton(android.R.string.yes, this)
+                        .setNegativeButton(android.R.string.no, this)
+                        .show();
+                mAllowSignatureFakeDialog.setOnDismissListener(this);
+            } else {
+                Settings.Secure.putInt(getActivity().getContentResolver(),
+                        Settings.Secure.ALLOW_SIGNATURE_FAKE, 0);
+                updateAllowSignatureFakeOption();
+            }
         } else if (preference == mShowAllANRs) {
             writeShowAllANRsOptions();
         } else if (preference == mForceHardwareUi) {
@@ -1685,6 +1720,10 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
             mUpdateRecoveryDialog.dismiss();
             mUpdateRecoveryDialog = null;
         }
+        if (mAllowSignatureFakeDialog != null) {
+            mAllowSignatureFakeDialog.dismiss();
+            mAllowSignatureFakeDialog = null;
+        }
     }
 
     public void onClick(DialogInterface dialog, int which) {
@@ -1727,6 +1766,14 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
                     .putBoolean(PREF_SHOW, true)
                     .apply();
             }
+        } else if (dialog == mAllowSignatureFakeDialog) {
+            if (which == DialogInterface.BUTTON_POSITIVE) {
+                Settings.Secure.putInt(getActivity().getContentResolver(),
+                        Settings.Secure.ALLOW_SIGNATURE_FAKE, 1);
+            } else {
+                // Reset the toggle
+                mAllowSignatureFake.setChecked(false);
+            }
         } else if (dialog == mRootDialog) {
             if (which == DialogInterface.BUTTON_POSITIVE) {
                 writeRootAccessOptions(mSelectedRootValue);
@@ -1758,6 +1805,9 @@ public class DevelopmentSettings extends RestrictedSettingsFragment
                 mEnabledSwitch.setChecked(false);
             }
             mEnableDialog = null;
+        } else if (dialog == mAllowSignatureFakeDialog) {
+            updateAllowSignatureFakeOption();
+            mAllowSignatureFakeDialog = null;
         } else if (dialog == mUpdateRecoveryDialog) {
             updateUpdateRecoveryOptions();
             mUpdateRecoveryDialog = null;
-- 
1.9.5.msysgit.0

